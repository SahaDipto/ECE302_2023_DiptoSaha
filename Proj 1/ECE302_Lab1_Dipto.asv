clear;
close;

%% Question A

%a) 
% The total number of combinations is 216, and the only combination that can
% give 18 is rolling three 6's which is 1/216.
n = 1e7;
prob1t = dicegenpro(18, n, 3, 6, 1, 1);

%% b)
%Since there are three dice rolls now, the probability increases to 4/216,
%which is shown in the demo.
% prob_partb = dicegen(18, n, 3, 6, 3);

prob_partb1 = dicegenpro(18, n, 3, 6, 3, 1);

%% c)
%It is (4/216)^6, it is hard to simulate because it would take too long
n_c = 1e12;
prob_partc = dicegenpro(18, n, 3, 6, 3, 6);

%% d)
%The probability of rolling the most average person using the fun way is
%incredibly low and is around 0%
chance = 0;
stat = 0;
prob_partd = dicegenpro(9, n, 3, 6, 3, 6);


%% Question 2

%part a)
%Troll will have an average health of 2.5, and fireball will have an
%average damage of three, with the probability of a fireball doing more
%than 3 damage at 25%. 

troll_hitpoint = dungeondicedist(n, 4, 1);
fireball_damage = dungeondicedist(n, 2, 2);

%% part b
%Probability mass function
%for troll hit points it is just 1/4 for hit points 1, 2, 3, 4 and 0 for
%everything else

figure;
subplot(2, 1, 1);
stem(1:1:4, troll_hitpoint./n);
title("probability function for troll hit point");
grid("on");
xlim([0  5]);
xticks([1 2 3 4 5]);
xticklabels([1 2 3 4 5]);
yticks(0:0.05:0.25);
yticklabels(0:0.05:0.25);
xlabel("troll hitpoints");


%for fireball dmg it is:
% [2-|3-x|]/4 where x is = 1, 2, 3, 4; and 0 for everything else

subplot(2, 1, 2);
stem(1:1:4, fireball_damage./n);
title("probability function for fireball damage");
grid("on");
xlim([0  5]);
xticks([1 2 3 4 5]);
xticklabels([1 2 3 4 5]);
yticks([0 0.25 0.5]);
yticklabels([0 0.25 0.5]);
xlabel("Firball Damage");

%% part C
attackdie = [2 2];
trolldie = [4 1];
[Q2_partC_percentage, ~] = battlesim(attackdie, trolldie, n, 6, 6);

%% Part D
%On average there is a 90% chance that if 5 trolls are killed, then the
%last troll will survive with 1 health.

[~, dist_d] = battlesim(attackdie, trolldie, n, 6, 5);
totalnumberofhealthytrolls = sum(dist_d);
Q2_partD_average = (dist_d(1,1)+dist_d(2,1)*2)/totalnumberofhealthytrolls;

%% graph for remaining goblin health after 5 out of 6 goblins are dead
figure;
title("Health of the remaining goblin given that 5 goblins are dead");
stem(1:1:4, dist_d/(sum(totalnumberofhealthytrolls)));
grid("on");
xlim([0  5]);
xticks(0:1:5);
xticklabels(0:1:5);

%% Part E
%On average Shivam does 0 damage, but if he does damage, then it would
%mostly likely be around 7 to 8 damage.
shivam_weap_1 = [6, 2];
shivam_weap_2 = [4, 1];
dist_e = shivam(n, shivam_weap_1, shivam_weap_2)/n;
%%
%shivam_average = 0;
for i = 2:16
    shivam_average = dist_e(i+1, 1)*i + shivam_average;
end

%% Shiva, weapon distribution
figure;
stem(0:1:16, dist_e);
title("Distribution of Shivam's Weapon Damage");
grid("on");
xlim([-1 18])
xticks(0:1:16);
xticklabels(0:1:16);

%% Functions

%function used for all of number 1 to determine the probability of getting
%a specific stat roll in a specified number of stats, a number of sides,
%rolls and trials. 
function [probability] = dicegenpro(desiredvalue, number, rolls, sides, trials, stats)
    %values for calculating probability
    chance = 0;
    succ = 0;

    %Simulation
    for i = 1:number
        for z = 1:stats

            %Simulates the dice roll depending on the sides, rolls, and
            %trials(basically if we are using regular way trials = 1,
            %fun way trials = 2)
            roll1 = max(sum(randi(sides, trials, rolls), 2));

            %If roll1 == desiredvalue add one to chance
            if(roll1 == desiredvalue)
                chance = chance + 1;
            end
        end

        %If chance = the desired number ofts we to show that it
        %is a successadd one  sta
        if(chance == stats)
            succ = succ + 1;
        end

        %reset for next stage
        chance = 0;
    end
    probability = succ/number;
end

%Used for generating a distribution on fireball damage and troll health
function [dist] = dungeondicedist(number, sides, rolls)
    %Initializing the distribution
    dist = zeros(sides*rolls, 1);
    for i = 1:number
        roll1 = sum(randi(sides, 1, rolls));

        %add one depending on what is generated by roll 1
        dist(roll1, 1) = dist(roll1, 1)+1;
    end

end

%battle simulator for question 2 part c and d.
function [percentage, dist] = battlesim(attackdie, foedie, n, numberoffoe, numberdead)
    %initialization of percentage and distribution
    percentage = 0;
    dist = zeros(foedie(1,1)*foedie(1,2), 1);

    %simulation
    for i = 1:n

        %attack damage calculation
        attackdmg = sum(randi(attackdie(1,1), 1, attackdie(1,2)),2);

        %troll damage calculation
        trolls_hp = sum(randi(foedie(1,1), numberoffoe, foedie(1,2)), 2);  
        
        %determines the total number of trolls remaining
        trollrem = sum((trolls_hp-attackdmg)>0);

        %determines if there are any survivors
        survivor = max(trolls_hp-attackdmg);

        %checks if the desired amount of trolls are killed
        if(trollrem == (numberoffoe - numberdead))
            percentage = percentage+1;

            %if there are any remaining trolls, then return the information
            %about the health of the remaining troll
            if(trollrem > 0)
                dist(survivor, 1) = dist(survivor, 1) + 1;
            end
        end
    end
    percentage = percentage/n;
end

%shivam damage simulator.
function [damage_dist] = shivam(n, weapon1, weapon2)
    %damage distribution array is 17 by 1 because you output 0 to 16 as
    %your damage. I set the index of 1 to correspond to 0 damage
    damage_dist = zeros(weapon1(1,1)*weapon1(1,2)+weapon2(1,1)*weapon2(1,2)+1, 1);
    
    %damage counter is set to 1 because there is a possibility that you can
    %roll a 0
    dmg = 1;
    for i = 1:n
        %Checks if you roll a 20 or higher
        if(randi(20)>=11)
            %If check is passed, then it rolls the 2d6 weapon
            dmg = 1+sum(randi(weapon1(1,1),1, weapon1(1,2)));

            %Another check to see if you roll an 11 or higher
            
            if(randi(20)>=11)
                %If the check succeeds, then the 1d4 weapon is rolled
                dmg = dmg + sum(randi(weapon2(1,1), 1, weapon2(1,2)));
            end
        end
        
        %counting how much damage was done
        damage_dist(dmg, 1) = (damage_dist(dmg, 1)) + 1;
        
        %reset to 1
        dmg = 1;
    end

end

